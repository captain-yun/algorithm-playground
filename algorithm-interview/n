[33mcommit dff8ecb9bc18962386edf19f09eac0a1d13ca04e[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;32mnew[m[33m)[m
Author: jslovejs182 <jslovejs182@gmail.com>
Date:   Mon May 3 14:29:31 2021 +0900

    Create folder(programmers)

[1mdiff --git a/README.md b/README.md[m
[1mindex 36beb5c..5ea3bd4 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,3 +1,35 @@[m
 <h1>What I've learnt!</h1>[m
[32m+[m[32m<h3>How to write Markdown</h3>[m
 [m
[31m-<h2>String</h2>[m
\ No newline at end of file[m
[32m+[m[32m[Mark Down Usage(KR version)](https://gist.github.com/ihoneymon/652be052a0727ad59601)[m
[32m+[m
[32m+[m[32m<h3>How to convert list to string</h3>[m
[32m+[m[32m```[m
[32m+[m[32m  >> l = ["a", "b", "c"][m
[32m+[m[32m  >> s = ''.join(l)[m
[32m+[m[32m  >> print(s)[m
[32m+[m[32m  "abc"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m<h3>How to convert list to string if element is not a string type</h3>[m
[32m+[m[32m<h4>A. if you try to convert int list to string, you get TypeError, because join() method only takes string type as its parameter</h4>[m
[32m+[m[32m```buildoutcfg[m
[32m+[m[32m  >> l = [1, 2, 3][m
[32m+[m[32m  >> s = ''.join(l)[m
[32m+[m[32m  Traceback (most recent call last):[m
[32m+[m[32m    File "<pyshell#1>", line 1, in <module>[m
[32m+[m[32m      ''.join(l)[m
[32m+[m[32m  TypeError: sequence item 0: expected str instance, int found[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m<h4>B. So before using join() method, you should convert an element type from int to string, first</h4>[m
[32m+[m[32m```buildoutcfg[m
[32m+[m[32m# Using list comprehension[m
[32m+[m[32m  >> l = [1, 2, 3][m
[32m+[m[32m  >> ''.join([str(_) for _ in l])[m
[32m+[m[32m  '123'[m[41m [m
[32m+[m[32m# Using map()[m
[32m+[m[32m  >> l = [1, 2, 3][m
[32m+[m[32m  >> ''.join(map(str, l))[m
[32m+[m[32m '123'[m
[32m+[m[32m```[m
\ No newline at end of file[m
[1mdiff --git a/__pycache__/remove_duplicate_letters.cpython-38.pyc b/__pycache__/remove_duplicate_letters.cpython-38.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..ee063dc[m
Binary files /dev/null and b/__pycache__/remove_duplicate_letters.cpython-38.pyc differ
[1mdiff --git a/__pycache__/valid_parentheses.cpython-38.pyc b/__pycache__/valid_parentheses.cpython-38.pyc[m
[1mnew file mode 100644[m
[1mindex 0000000..956c58e[m
Binary files /dev/null and b/__pycache__/valid_parentheses.cpython-38.pyc differ
[1mdiff --git a/array_partion_i.py b/array_partion_i.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9670aae[m
[1m--- /dev/null[m
[1m+++ b/array_partion_i.py[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m
[32m+[m[32mdef array_partition_i(l:list):[m
[32m+[m[32m    max_min_sum = 0[m
[32m+[m[32m    while len(l) >= 2:[m
[32m+[m[32m        num1 = max(l)[m
[32m+[m[32m        l.remove(num1)[m
[32m+[m[32m        num2 = max(l)[m
[32m+[m[32m        l.remove(num2)[m
[32m+[m
[32m+[m[32m        max_min_sum += min(num1, num2)[m
[32m+[m
[32m+[m[32m    print(max_min_sum)[m
[32m+[m[32m    return max_min_sum[m
[32m+[m
[32m+[m[32mdef array_pair_sum_02(nums: list):[m
[32m+[m[32m    sum = 0[m
[32m+[m[32m    nums.sort()[m
[32m+[m
[32m+[m[32m    for i, n in enumerate(nums):[m
[32m+[m[32m        #ÏßùÏàò Î≤àÏß∏ Í∞íÏùò Ìï© Í≥ÑÏÇ∞[m
[32m+[m[32m        if i % 2 == 0:[m
[32m+[m[32m            sum += n[m
[32m+[m[32m    return sum[m
[32m+[m
[32m+[m[32mdef array_pair_sum_03(nums: list):[m
[32m+[m[32m    return sum(sorted(nums)[::2])[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    array_partition_i([1,4,3,2])[m
\ No newline at end of file[m
[1mdiff --git a/best_time_to_sell_stocks.py b/best_time_to_sell_stocks.py[m
[1mnew file mode 100644[m
[1mindex 0000000..bcb1fe4[m
[1m--- /dev/null[m
[1m+++ b/best_time_to_sell_stocks.py[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32mimport sys[m
[32m+[m
[32m+[m
[32m+[m[32mdef max_profit(prices):[m
[32m+[m[32m    max_price = 0[m
[32m+[m
[32m+[m[32m    for i, price in enumerate(prices):[m
[32m+[m[32m        if i < len(prices) - 1 and max(prices[i+1:]) - price > max_price:[m
[32m+[m[32m            max_price = max(prices[i+1:]) - price[m
[32m+[m[32m    print(max_price)[m
[32m+[m
[32m+[m[32m# book example[m
[32m+[m[32mdef max_profit(prices):[m
[32m+[m[32m    profit = 0[m
[32m+[m[32m    max_price = sys.maxsize     # why we use max value? ÏµúÎåÄÍ∞íÏóêÎäî Í∞ÄÏû• ÎÇÆÏùÄ Í∞íÏùÑ, ÏµúÏÜåÍ∞íÏóêÎäî Í∞ÄÏû• ÎÜíÏùÄ Í∞íÏùÑ...[m
[32m+[m[32m                                #  mx = -sys.maxsize / mn = sys.maxsize[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    max_profit([7,1,5,3,6,4])[m
\ No newline at end of file[m
[1mdiff --git a/most_common_word.py b/most_common_word.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a8c2cd3[m
[1m--- /dev/null[m
[1m+++ b/most_common_word.py[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m# def most_common_word(paragraph :str, banned: list[str]):[m
[32m+[m[32m#     paragraph = paragraph.split(" ,.")[m
[32m+[m[32m#     most_common = {}[m
[32m+[m[32m#     for word in paragraph:[m
[32m+[m[32m#         if most_common[word]:[m
[32m+[m[32m#             most_common[word] = 1[m
[32m+[m[32m#         else:[m
[32m+[m[32m#             most_common[word] += 1[m
[32m+[m
[32m+[m
[32m+[m[32mimport re[m
[32m+[m[32mdef most_common_word_1(paragraph :str, banned: list[str]):[m
[32m+[m[32m    words = [word for word in re.sub(r'[^\w]', ' ', paragraph).lower().split() if word not in banned][m
[32m+[m[32m    print(words)[m
[32m+[m
[32m+[m[32m    words = [word for word in re.sub(r'[^\w]', ' ', paragraph).lower().split() if word not in banned][m
[32m+[m[32m    print(words)[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    most_common_word_1(["h","e","l","l","o"])[m
\ No newline at end of file[m
[1mdiff --git a/multiple_except_self.py b/multiple_except_self.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e11a2c8[m
[1m--- /dev/null[m
[1m+++ b/multiple_except_self.py[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mfrom functools import reduce[m
[32m+[m
[32m+[m[32mdef multiple_except_self(nums):[m
[32m+[m[32m    answer = [][m
[32m+[m[32m    for i, num in enumerate(nums):[m
[32m+[m[32m        copy_nums = [][m
[32m+[m[32m        copy_nums = nums.copy()[m
[32m+[m[32m        copy_nums.pop(i)[m
[32m+[m[32m        answer.append(reduce(lambda x, y: x * y, copy_nums))[m
[32m+[m[32m    print(answer)[m
[32m+[m[32m    return answer[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    multiple_except_self([1,2,3,4])[m
\ No newline at end of file[m
[1mdiff --git a/palindrome_linked_list.py b/palindrome_linked_list.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a039fa5[m
[1m--- /dev/null[m
[1m+++ b/palindrome_linked_list.py[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32m#palindrome linked list[m
[32m+[m
[32m+[m[32mlist[m
[32m+[m
[1mdiff --git a/programmers/citations.py b/programmers/citations.py[m
[1mnew file mode 100644[m
[1mindex 0000000..f5a39f6[m
[1m--- /dev/null[m
[1m+++ b/programmers/citations.py[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mfrom functools import reduce[m
[32m+[m
[32m+[m[32mdef solution(citations):[m
[32m+[m[32m    answer = 0[m
[32m+[m[32m    citations.sort()[m
[32m+[m[32m    n = len(citations)[m
[32m+[m[32m    # size[m
[32m+[m[32m    # 1. Ïö∞ÏÑ† Ï†ïÎ†¨ÌïúÎã§[m
[32m+[m[32m    # 2. Ï†ïÎ†¨Îêú ÏõêÏÜå Ï§ë ÌïòÎÇòÏî© ÌÉÄÍ≤üÏúºÎ°ú ÌïòÏó¨ Îã§ÏùåÏùÑ Î∞òÎ≥µÌïúÎã§.[m
[32m+[m[32m        # 2-1. target = 1 ~ 10000[m
[32m+[m
[32m+[m[32m    # size.sort()[m
[32m+[m[32m    h = 0[m
[32m+[m[32m    for h in range(n):[m
[32m+[m[32m        if len(list(filter(lambda x: x >= h, citations))) >= h and len(list(filter(lambda x: x <= h, citations))) <= h:[m
[32m+[m[32m            if answer <= h:[m
[32m+[m[32m                an